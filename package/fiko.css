@charset "UTF-8";
/*!
 * FIKO üê∏ v0.5.10 (https://fiko.rokma.rocks)
 * 2024 CLASSLESS BLACK & WHITE CSS FRAMEWORK LIBRARY
 * MIT License | https: //github.com/toybreaker/fiko
 * Copyright 2023 Toybreaker - Licensed under MIT
 */

/* ||| Layer Order Declaration ||| */
@layer reset, root, toggle, containers, components, classes;

/* ||| Base Layer ||| */
@layer reset {
  /* The New CSS Reset */
  *:where(
      :not(html, iframe, canvas, img, svg, video, audio):not(svg *, symbol *)
    ) {
    all: unset;
    display: revert;
  }

  /* Preferred box-sizing value */
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  ::before,
  ::after {
    /* Add text decoration inheritance in all browsers: */
    text-decoration: inherit;
    /* Add vertical alignment inheritance in all browsers: */
    vertical-align: inherit;
  }

  /* Reapply the pointer cursor for anchor tags */
  a,
  button {
    cursor: revert;
  }

  /* Remove list styles (bullets/numbers) */
  ol,
  ul,
  menu {
    list-style: none;
  }

  /* For images to not be able to exceed their container */
  img {
    max-inline-size: 100%;
    max-block-size: 100%;
  }

  /* removes spacing between cells in tables */
  table {
    border-collapse: collapse;
  }

  /* Safari - solving issue when using user-select:none on the <body> text input doesn't working */
  input,
  textarea {
    -webkit-user-select: auto;
  }

  /* revert the 'white-space' property for textarea elements on Safari */
  textarea {
    white-space: revert;
  }

  /* minimum style to allow to style meter element */
  meter {
    -webkit-appearance: revert;
    appearance: revert;
  }

  /* preformatted text - use only for this feature */
  :where(pre) {
    all: revert;
  }

  /* reset default text opacity of input placeholder */
  ::placeholder {
    color: unset;
  }

  /* remove default dot (‚Ä¢) sign */
  ::marker {
    content: initial;
  }

  /* fix the feature of 'hidden' attribute.
   display:revert; revert to element instead of attribute */
  :where([hidden]) {
    display: none;
  }

  /* revert for bug in Chromium browsers
   - fix for the content editable attribute will work properly.
   - webkit-user-select: auto; added for Safari in case of using user-select:none on wrapper element */
  :where([contenteditable]:not([contenteditable="false"])) {
    -moz-user-modify: read-write;
    -webkit-user-modify: read-write;
    overflow-wrap: break-word;
    -webkit-line-break: after-white-space;
    -webkit-user-select: auto;
  }

  /* apply back the draggable feature - exist only in Chromium and Safari */
  :where([draggable="true"]) {
    -webkit-user-drag: element;
  }

  /* Revert Modal native behavior */
  :where(dialog:modal) {
    all: revert;
  }

  html {
    /* font-size: 100%; */
    line-height: 1.15;
    -webkit-text-size-adjust: 100%;

    > * {
    font-size: unset;
    }
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: 0;
    font-size: inherit;
    font-weight: inherit;
  }

  ::-webkit-file-upload-button {
    /* Correct the inability to style clickable types in iOS and Safari. */
    -webkit-appearance: button;
    /* Change font properties to `inherit` in Safari. */
    font: inherit;
  }

  /* remove the gray background on active links in IE 10. */
  pre {
    font-family: monospace, monospace;
    font-size: 1em;
  }

  a {
    /* background-color: transparent; */
  }

  button,
  [role="button"],
  input[type="button"],
  input[type="reset"],
  input[type="submit"] {
    --background-color: var(--currentBG);
    --border-color: var(--currentTXT);
    --color: var(--currentTXT);
    --box-shadow: var(--button-box-shadow, 0 0 0 rgba(0, 0, 0, 0));
    padding: var(--form-element-spacing-vertical)
      var(--form-element-spacing-horizontal);
    border: var(--border) solid var(--border-color);
    border-radius: var(--border-radius);
    outline: 0;
    background-color: var(--background-color);
    box-shadow: var(--box-shadow);
    color: var(--color);
    font-weight: var(--font-weight);
    font-size: 1rem;
    line-height: var(--line-height);
    text-align: center;
    cursor: pointer;
    transition: background-color var(--transition),
      border-color var(--transition), color var(--transition),
      box-shadow var(--transition);
  }
}

/* ||| Root Declarations ||| */
@layer root {
  :root {
    /* colours */
    --color-white: rgba(255, 255, 255, 1);
    --color-black: rgba(0, 0, 0, 1);


    /* colour's modes */
    --light-mode: var(--color-white);
    --dark-mode: var(--color-black);
  }

  /* Initial styles assuming light theme */
  body[data-theme="light"] {
    /* set the CURRENT colours: */
    --currentBG: var(--color-white);
    --currentTXT: var(--color-black);
    /* apply the CURRENT colours: */
    background-color: var(--currentBG);
    color: var(--currentTXT);

  }

  /* When data-theme is set to dark */
  body[data-theme="dark"] {
    /* set the CURRENT colours: */
    --currentBG: var(--color-black);
    --currentTXT: var(--color-white);
    /* apply the CURRENT colours: */
    background-color: var(--currentBG);
    color: var(--currentTXT);
  }

  :root {
    /* auto changing color transparent */


    --accordion-open-summary-color: var(--currentTXTtrasparent)

    /* spacing & borders */
    --space: 1rem;
    --spaceLR: 5dvw;
    --spaceTB: 2dvh;
    --border: 2px;
    --border-color: var(--currentTXT);
    --radius: 8px;

    /* transitions */
    --transition: 0.2s ease-in-out;

    /* typography */
    --font-size: clamp(1.25rem, 1.1717rem + 0.4174vw, 1.85rem);
    --font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
      var(--font-family-emoji);
    --font-family-monospace: ui-monospace, SFMono-Regular, "SF Mono", Menlo,
      Consolas, "Liberation Mono", monospace, var(--font-family-emoji);
    --font-family-emoji: "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol", "Noto Color Emoji";

    /* ICONS */

    --icon-checkbox: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='4' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 6 9 17 4 12'%3E%3C/polyline%3E%3C/svg%3E");

    --icon-minus: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(255, 255, 255)' stroke-width='4' stroke-linecap='round' stroke-linejoin='round'%3E%3Cline x1='5' y1='12' x2='19' y2='12'%3E%3C/line%3E%3C/svg%3E");

    --icon-chevron: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");

    --icon-date: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3E%3C/rect%3E%3Cline x1='16' y1='2' x2='16' y2='6'%3E%3C/line%3E%3Cline x1='8' y1='2' x2='8' y2='6'%3E%3C/line%3E%3Cline x1='3' y1='10' x2='21' y2='10'%3E%3C/line%3E%3C/svg%3E");

    --icon-time: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='12' cy='12' r='10'%3E%3C/circle%3E%3Cpolyline points='12 6 12 12 16 14'%3E%3C/polyline%3E%3C/svg%3E");

    --icon-search: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='11' cy='11' r='8'%3E%3C/circle%3E%3Cline x1='21' y1='21' x2='16.65' y2='16.65'%3E%3C/line%3E%3C/svg%3E");

    --icon-close: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='3' stroke-linecap='round' stroke-linejoin='round'%3E%3Cline x1='18' y1='6' x2='6' y2='18'%3E%3C/line%3E%3Cline x1='6' y1='6' x2='18' y2='18'%3E%3C/line%3E%3C/svg%3E");

    --icon-loading: url("data:image/svg+xml,%3Csvg fill='none' height='24' width='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' %3E%3Cstyle%3E g %7B animation: rotate 2s linear infinite; transform-origin: center center; %7D circle %7B stroke-dasharray: 75,100; stroke-dashoffset: -5; animation: dash 1.5s ease-in-out infinite; stroke-linecap: round; %7D @keyframes rotate %7B 0%25 %7B transform: rotate(0deg); %7D 100%25 %7B transform: rotate(360deg); %7D %7D @keyframes dash %7B 0%25 %7B stroke-dasharray: 1,100; stroke-dashoffset: 0; %7D 50%25 %7B stroke-dasharray: 44.5,100; stroke-dashoffset: -17.5; %7D 100%25 %7B stroke-dasharray: 44.5,100; stroke-dashoffset: -62; %7D %7D %3C/style%3E%3Cg%3E%3Ccircle cx='12' cy='12' r='10' fill='none' stroke='rgb(136, 145, 164)' stroke-width='4' /%3E%3C/g%3E%3C/svg%3E");
  }
  /* end of :root */

  html {
    background-color: var(--currentTXT);
  }

  body {
    font-size: var(--font-size);
    font-family: var(--font-family);
  }
  small {
    font-size: 77%;
  }

  blockquote {
  }

  /**
 * Code
 */
  pre,
  code,
  kbd,
  samp {
    font-size: 0.875em;
    font-family: var(--font-family);
  }

  pre code {
    font-size: inherit;
    font-family: inherit;
  }

  pre {
    -ms-overflow-style: scrollbar;
    overflow: auto;
  }

  pre,
  code,
  kbd {
    border-radius: var(--border-radius);
    background: var(--code-background-color);
    color: var(--code-color);
    font-weight: var(--font-weight);
    line-height: initial;
  }

  code,
  kbd {
    display: inline-block;
    padding: 0.375rem;
  }

  pre {
    display: block;
    margin-bottom: var(--space);
    overflow-x: auto;
  }
  pre > code {
    display: block;
    padding: var(--space);
    background: none;
    line-height: var(--line-height);
  }

  kbd {
    background-color: var(--code-kbd-background-color);
    color: var(--code-kbd-color);
    vertical-align: baseline;
  }

  [hidden],
  template {
    display: none !important;
  }

  canvas {
    display: inline-block;
  }

  /* Loading ([aria-busy=true]) */
  [aria-busy="true"]:not(input, select, textarea, html)::before {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-image: var(--icon-loading);
    background-size: 1rem auto;
    background-repeat: no-repeat;
    content: "";
    vertical-align: -0.125em;
  }
  [aria-busy="true"]:not(input, select, textarea, html):not(:empty)::before {
    -webkit-margin-end: calc(var(--space) * 0.5);
    margin-inline-end: calc(var(--space) * 0.5);
  }
  [aria-busy="true"]:not(input, select, textarea, html):empty {
    text-align: center;
  }

  button[aria-busy="true"],
  [type="submit"][aria-busy="true"],
  [type="button"][aria-busy="true"],
  [type="reset"][aria-busy="true"],
  [role="button"][aria-busy="true"],
  a[aria-busy="true"] {
    pointer-events: none;
  }

  /* Accessibility & User interaction */
  [aria-controls] {
    cursor: pointer;
  }

  [aria-disabled="true"],
  [disabled] {
    cursor: not-allowed;
  }

  [aria-hidden="false"][hidden] {
    display: initial;
  }

  [aria-hidden="false"][hidden]:not(:focus) {
    clip: rect(0, 0, 0, 0);
    position: absolute;
  }

  a,
  area,
  button,
  input,
  label,
  select,
  summary,
  textarea,
  [tabindex] {
    -ms-touch-action: manipulation;
  }

  [dir="rtl"] {
    direction: rtl;
  }



}

/* ||| Toggle Layer ||| */
@layer toggle {
  .switcher {
    background-color: var(--currentBG);
    /* position: fixed; */
    z-index: 1000;
    right: var(--space);
    bottom: var(--space);
    width: auto;
    padding: 0.75rem;
    margin-bottom: 0;
    border-radius: 2rem;
    line-height: 1;
    text-align: right;
  }

  .switcher:hover::after {
    transform: rotate(180deg);
  }

  .switcher::after {
    display: inline-block;
    width: 1.5rem;
    height: 1.5rem;
    border: 0.15rem solid currentColor;
    border-radius: 50%;
    background: linear-gradient(
      to right,
      currentColor 0,
      currentColor 50%,
      transparent 50%
    );
    content: "";
    vertical-align: bottom;
    transition: transform var(--transition);
  }

  .switcher:focus,
  .switcher:hover {
    max-width: 100%;
    transition: background-color var(--transition),
      border-color var(--transition), color var(--transition),
      box-shadow var(--transition);
  }

  .switcher:focus,
  .switcher:hover {
    max-width: 100%;
    transition: background-color var(--transition),
      border-color var(--transition), color var(--transition),
      box-shadow var(--transition);
  }

  .switcher i {
    display: inline-block;
    max-width: 0;
    padding: 0;
    overflow: hidden;
    font-style: normal;
    font-size: revert;
    white-space: nowrap;
    pointer-events: none;
  }

  .switcher:hover i {
    cursor: pointer;
    max-width: 100%;
    padding: 0 calc(var(--space) / 2) 0 calc(var(--space) / 4);
    transition: max-width var(--transition), padding var(--transition);
  }

  .switcher label {
    user-select: none;
    &:hover {
    cursor: pointer;
  }

  }

  #toggle-theme {
    display: none;
  }
}

/* ||| Container Elements Layer ||| */
@layer containers {
  header,
  nav,
  section,
  footer {
    background-color: var(--currentBG);
    color: var(--currentTXT);
  }

  nav,
  header,
  footer {
    padding: var(--spaceTB) var(--spaceLR);
  }

  /* Nav */
  :where(nav li)::before {
    float: left;
    content: "‚Äã";
  }

  nav,
  nav ul {
    display: flex;
    flex-wrap: wrap
  }

  nav {
    justify-content: space-between;
  }
  nav ol,
  nav ul {
    align-items: center;
    margin-bottom: 0;
    padding: 0;
    list-style: none;
  }
  nav ol:first-of-type,
  nav ul:first-of-type {
    margin-left: calc(var(--nav-element-spacing-horizontal) * -1);
  }
  nav ol:last-of-type,
  nav ul:last-of-type {
    margin-right: calc(var(--nav-element-spacing-horizontal) * -1);
  }
  nav li {
    display: inline-block;
    margin: 0;
    padding: var(--nav-element-spacing-vertical)
      var(--nav-element-spacing-horizontal);
  }
  nav li :where(a, [role="link"]) {
    display: inline-block;
    margin: calc(var(--nav-link-spacing-vertical) * -1)
      calc(var(--nav-link-spacing-horizontal) * -1);
    padding: var(--nav-link-spacing-vertical) var(--nav-link-spacing-horizontal);
    border-radius: var(--border-radius);
  }
  nav li :where(a, [role="link"]):not(:hover) {
    text-decoration: none;
  }
  nav li button,
  nav li [role="button"],
  nav
    li
    input:not([type="checkbox"], [type="radio"], [type="range"], [type="file"]),
  nav li select {
    height: auto;
    margin-right: inherit;
    margin-bottom: 0;
    margin-left: inherit;
    padding: calc(var(--nav-link-spacing-vertical) - var(--border-width) * 2)
      var(--nav-link-spacing-horizontal);
  }
  nav[aria-label="breadcrumb"] {
    align-items: center;
    justify-content: start;
  }
  nav[aria-label="breadcrumb"] ul li:not(:first-child) {
    -webkit-margin-start: var(--nav-link-spacing-horizontal);
    margin-inline-start: var(--nav-link-spacing-horizontal);
  }
  nav[aria-label="breadcrumb"] ul li:not(:last-child)::after {
    position: absolute;
    width: calc(var(--nav-link-spacing-horizontal) * 2);
    -webkit-margin-start: calc(var(--nav-link-spacing-horizontal) / 2);
    margin-inline-start: calc(var(--nav-link-spacing-horizontal) / 2);
    content: var(--nav-breadcrumb-divider);
    color: var(--muted-color);
    text-align: center;
    text-decoration: none;
  }
  nav[aria-label="breadcrumb"] a[aria-current] {
    background-color: transparent;
    color: inherit;
    text-decoration: none;
    pointer-events: none;
  }

  /* Table */
  :where(table) {
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
    text-indent: 0;
  }

  th,
  td {
    padding: calc(var(--space) / 2) var(--space);
    width: fit-content;
    border-bottom: var(--border-width) solid var(--table-border-color);
    background-color: var(--background-color);
    color: var(--color);
    font-weight: var(--font-weight);
    text-align: left;
    text-align: start;
  }

  tfoot th,
  tfoot td {
    border-top: var(--border-width) solid var(--table-border-color);
    border-bottom: 0;
  }

  table.striped tbody tr:nth-child(odd) th,
  table.striped tbody tr:nth-child(odd) td {
    background-color: var(--table-row-stripped-background-color);
  }

  img {
    width: auto;
    height: auto;
    border-style: none;
  }

  :where(svg:not([fill])) {
    fill: currentColor;
  }

  svg:not(:root) {
    overflow: hidden;
  }

  aside {
    nav,
    ol,
    ul,
    li {
      display: block;
    }

    li {
      padding: calc(var(--space) * 0.5) var(--nav-element-spacing-horizontal);
    }

    li a {
      display: block;
    }

    li [role="button"] {
      margin: inherit;
    }
  }

  section {
    margin-bottom: var(--spaceTB);
  }

  /**
 * Grid
 * Minimal grid system with auto-layout columns
 */
  .grid {
    grid-column-gap: var(--grid-column-gap);
    grid-row-gap: var(--grid-row-gap);
    display: grid;
    grid-template-columns: 1fr;
    margin: 0;
  }
  @media (min-width: 768px) {
    .grid {
      grid-template-columns: repeat(auto-fit, minmax(0%, 1fr));
    }
  }
  .grid > * {
    min-width: 0;
  }

  /* Horizontal scroller (<figure>) */
  figure {
    display: block;
    margin: 0;
    padding: 0;
    overflow-x: auto;
    img {
      max-inline-size: 200%;
    }
  }
  figure figcaption {
    padding: calc(var(--spaceTB) * 0.5) 0;
    color: var(--muted-color);
  }
}

/* ||| Contained Elements Layer ||| */
@layer components {
  hr {
    height: 0;
    margin: var(--spaceTB) 0;
    border: 0;
    border-top: 1px solid var(--currentTXT);
    color: inherit;
  }

  /* Button v2*/

  button {
    margin: 0;
    overflow: visible;
    font-family: inherit;
    text-transform: none;
  }

  button,
  [type="submit"],
  [type="reset"],
  [type="button"] {
    -webkit-appearance: button;
  }

  button,
  [type="submit"],
  [type="reset"],
  [type="button"],
  [type="file"]::file-selector-button,
  [role="button"] {
    --background-color: var(--currentBG);
    --border-color: var(--currentTXT);
    --color: var(--currentTXT);
    --box-shadow: var(--button-box-shadow, 0 0 0 rgba(0, 0, 0, 0));
    padding: var(--form-element-spacing-vertical)
      var(--form-element-spacing-horizontal);
    border: var(--border-width) solid var(--border-color);
    border-radius: var(--border-radius);
    outline: none;
    background-color: var(--background-color);
    box-shadow: var(--box-shadow);
    color: var(--color);
    font-weight: var(--font-weight);
    font-size: 1rem;
    line-height: var(--line-height);
    text-align: center;
    text-decoration: none;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    transition: background-color var(--transition),
      border-color var(--transition), color var(--transition),
      box-shadow var(--transition);
  }
  button:is([aria-current], :hover, :active, :focus),
  [type="submit"]:is([aria-current], :hover, :active, :focus),
  [type="reset"]:is([aria-current], :hover, :active, :focus),
  [type="button"]:is([aria-current], :hover, :active, :focus),
  [type="file"]::file-selector-button:is(
      [aria-current],
      :hover,
      :active,
      :focus
    ),
  [role="button"]:is([aria-current], :hover, :active, :focus) {
    --background-color: var(--primary-hover-background);
    --border-color: var(--primary-hover-border);
    --box-shadow: var(--button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0));
    --color: var(--primary-inverse);
  }
  button:focus,
  [type="submit"]:focus,
  [type="reset"]:focus,
  [type="button"]:focus,
  [type="file"]::file-selector-button:focus,
  [role="button"]:focus {
    --box-shadow: var(--button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0)),
      0 0 0 var(--outline-width) var(--primary-focus);
  }

  [type="submit"],
  [type="reset"],
  [type="button"] {
    margin-bottom: var(--spacing);
  }

  :is(button, [type="submit"], [type="button"], [role="button"]).secondary,
  [type="reset"],
  [type="file"]::file-selector-button {
    --background-color: var(--secondary-background);
    --border-color: var(--secondary-border);
    --color: var(--secondary-inverse);
    cursor: pointer;
  }
  :is(button, [type="submit"], [type="button"], [role="button"]).secondary:is(
      [aria-current],
      :hover,
      :active,
      :focus
    ),
  [type="reset"]:is([aria-current], :hover, :active, :focus),
  [type="file"]::file-selector-button:is(
      [aria-current],
      :hover,
      :active,
      :focus
    ) {
    --background-color: var(--secondary-hover-background);
    --border-color: var(--secondary-hover-border);
    --color: var(--secondary-inverse);
  }
  :is(
      button,
      [type="submit"],
      [type="button"],
      [role="button"]
    ).secondary:focus,
  [type="reset"]:focus,
  [type="file"]::file-selector-button:focus {
    --box-shadow: var(--button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0)),
      0 0 0 var(--outline-width) var(--secondary-focus);
  }

  :is(button, [type="submit"], [type="button"], [role="button"]).contrast {
    --background-color: var(--currentTXT);
    --border-color: var(--currentBG);
    --color: var(--currentBG);
  }
  :is(button, [type="submit"], [type="button"], [role="button"]).contrast:is(
      [aria-current],
      :hover,
      :active,
      :focus
    ) {
    --background-color: var(--currentBG);
    --border-color: var(--currentTXT);
    --color: var(--currentTXT);
  }
  :is(
      button,
      [type="submit"],
      [type="button"],
      [role="button"]
    ).contrast:focus {
    --box-shadow: var(--button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0)),
      0 0 0 var(--outline-width) var(--currentTXT);
  }

  :is(button, [type="submit"], [type="button"], [role="button"]).outline,
  [type="reset"].outline {
    --background-color: transparent;
    --color: var(--currentTXT);
    --border-color: currentColor;
  }
  :is(button, [type="submit"], [type="button"], [role="button"]).outline:is(
      [aria-current],
      :hover,
      :active,
      :focus
    ),
  [type="reset"].outline:is([aria-current], :hover, :active, :focus) {
    --background-color: transparent;
    --color: var(--currentTXTtrasparent);
  }

  :is(
      button,
      [type="submit"],
      [type="button"],
      [role="button"]
    ).outline.secondary,
  [type="reset"].outline {
    --color: var(--currentTXTtrasparent);
    --border-color: currentColor;
  }
  :is(
      button,
      [type="submit"],
      [type="button"],
      [role="button"]
    ).outline.secondary:is([aria-current], :hover, :active, :focus),
  [type="reset"].outline:is([aria-current], :hover, :active, :focus) {
    --color: var(--currentTXTtrasparent);
  }

  :is(
      button,
      [type="submit"],
      [type="button"],
      [role="button"]
    ).outline.contrast {
    --color: var(--currentTXTtrasparent);
  }
  :is(
      button,
      [type="submit"],
      [type="button"],
      [role="button"]
    ).outline.contrast:is([aria-current], :hover, :active, :focus) {
    --color: var(--currentTXTtrasparent);
  }

  :where(
      button,
      [type="submit"],
      [type="reset"],
      [type="button"],
      [role="button"]
    )[disabled],
  :where(fieldset[disabled])
    :is(
      button,
      [type="submit"],
      [type="button"],
      [type="reset"],
      [role="button"]
    ) {
    opacity: 0.5;
    pointer-events: none;
  }

  /* Accordion (<details><summary>) */
  details {
    display: block;
    margin-bottom: var(--space);
    border-bottom: var(--border) solid var(--currentTXTtrasparent);

    & summary {
      line-height: 2;
      list-style-type: none;
      cursor: pointer;
      transition: color var(--transition);

      &:not([role]) {
        color: var(--currentTXT);
      }

      &::-webkit-details-marker {
        display: none;
      }

      &::marker {
        display: none;
      }

      &::-moz-list-bullet {
        list-style-type: none;
      }

      &:focus {
        outline: none;

        &:not([role]) {
          outline: 1px solid red;
          outline-offset: calc(var(--space) * 0.5);
          color: var(--currentTXT);
        }
      }

      &[role="button"] {
        width: 100%;
        text-align: left;

        &::after {
          height: calc(1rem * var(--line-height));
        }
      }
    }

    summary:focus-visible:not([role]) {
      outline: var(-border) solid var(--currentTXT);
      outline-offset: calc(var(--space) * 0.5);
      color: var(--currentTXT);
    }
  }

  summary::after {
    display: block;
    width: 1rem;
    height: 2rem;
    /* height: calc(1rem * var(--line-height)); */
    -webkit-margin-start: calc(var(--space) * 0.5);
    margin-inline-start: calc(var(--space) * 0.5);
    float: right;
    transform: rotate(-90deg);
    background-image: var(--icon-chevron);
    background-position: right center;
    background-size: 1rem auto;
    background-repeat: no-repeat;
    content: "";
    transition: transform var(--transition);
  }

  &[open] {
    > summary {
      margin-bottom: var(--space);

      &:not([role]) {
        &:not(:focus) {
          color: yellow;
        }
      }

      &::after {
        transform: rotate(0);
      }
    }
  }

  details[open] > summary {
    margin-bottom: var(--space);
  }

  details[open] > summary:not([role]):not(:focus) {
    color: var(--accordion-open-summary-color);
  }

  details[open] > summary::after {
    transform: rotate(0);
  }

  /* Headings, P, Span */
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  span {
    --spaceTB: 1ch;
    padding: var(--spaceTB) 0;
  }

  h1 {
    font-size: calc(var(--font-size) * 2.25);
  }

  h2 {
    font-size: calc(var(--font-size) * 1.65);
  }

  h3 {
    font-size: calc(var(--font-size) * 1.5);
  }

  h4 {
    font-size: calc(var(--font-size) * 1.25);
  }

  h5 {
    font-size: calc(var(--font-size) * 1.15);
  }

  h6 {
    font-size: calc(var(--font-size) * 1.1);
  }

  /* List */
  ul,
  ol {
    list-style-type: none;
  }

  li {
    padding: calc(var(--spaceTB) / 2) 0;
  }

  /* Card */
  article {
    margin: var(--spaceTB);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding-bottom: var(--spaceTB);

    @container (max-width: 555px) {
      width: 50%;
    }

    @container (max-width: 888px) {
      width: 33%;
    }

    @container (max-width: 1111px) {
      width: 25%;
    }

    > * {
      text-decoration: none;
    }

    & img {
      max-width: 100%;
    }

    & button {
      display: block;
      padding: var(--spaceTB) var(--spaceLR);
      margin: var(--spaceTB) var(--spaceLR);
      border: var(--border) 1px solid;
      border-radius: var(--radius);
      background-color: var(--currentTXT);
      color: var(--currentBG);
      /* before font-size: unset, it went to 13px somehow, gosh  */
      font-size: unset;
    }
  }
}

@layer classes {
  article.border {
    border: 1px solid var(--currentTXT);

    border-radius: var(--radius);
  }

  .container {
    margin-left: calc(var(--spaceLR) * 1.5);
    margin-right: calc(var(--spaceLR) * 1.5);
  }
  .invert {
    filter: invert(180);
  }
}

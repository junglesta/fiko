/* 🐲 CONTAINERS */
@layer containers {
  header:not(.invert),
  nav,
  section,
  footer {
    /* background-color: var(--curBG); */
    color: var(--curTXT);
  }

  /* NAV */
  /* :where(nav li)::before {
        float: left;
        content: '​';
      } */

  nav,
  nav ul {
    padding-inline: calc(var(--spaceLR) * 2);
    gap: var(--gap);
    margin: 0;
  }

  nav {
    width: 100%;
  }

  nav ol,
  nav ul {
    align-items: center;
    margin-block-end: 0;
    padding: 0;
    list-style: none;
  }

  nav ol:first-of-type,
  nav ul:first-of-type {
    margin-inline-start: var(--spaceLR);
  }

  nav ol:last-of-type,
  nav ul:last-of-type {
    margin-inline-end: var(--spaceLR);
  }

  nav li {
    display: inline-block;
    margin: 0;
  }

  nav li :where(a, [role='link']) {
    display: inline-block;
    border-radius: var(--rad);
  }

  nav li :where(a, [role='link']):not(:hover) {
    text-decoration: none;
  }

  nav li button,
  nav li [role='button'],
  nav
    li
    input:not(
      [type='checkbox'],
      [type='radio'],
      [type='range'],
      [type='file']
    ),
  nav li select {
    height: auto;
    margin-inline: inherit;
    margin-block-end: 0;
    padding: var(--spaceTB) var(--spaceLR);
  }

  nav[aria-label='breadcrumb'] {
    align-items: center;
    justify-content: start;
  }

  nav[aria-label='breadcrumb'] ul li:not(:first-child) {
    -webkit-margin-start: var(--spaceLR);
    margin-inline-start: var(--spaceLR);
  }

  nav[aria-label='breadcrumb']
    ul
    li:not(:last-child)::after {
    position: absolute;
    width: calc(var(--spaceLR) * 2);
    -webkit-margin-start: calc(var(--spaceLR) / 2);
    margin-inline-start: calc(var(--spaceLR) / 2);
    content: var(--nav-breadcrumb-divider);
    color: var(--curCOLa);
    text-align: center;
    text-decoration: none;
  }

  nav[aria-label='breadcrumb'] a[aria-current] {
    background-color: transparent;
    color: inherit;
    text-decoration: none;
    pointer-events: none;
  }

  /* TABLE */
  :where(table) {
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
    text-indent: 0;
  }

  th,
  td {
    padding: calc(var(--spaceTB) / 2) var(--spaceLR);
    width: fit-content;
    border-bottom: var(--curCOLa) solid var(--borderS);
    background-color: var(--curBG);
    color: var(--curTXT);
    font-weight: var(--font-weight);
    text-align: left;
    text-align: start;
  }

  tfoot th,
  tfoot td {
    border-top: var(--curCOLa) solid var(--borderS);
    border-bottom: 0;
    font-weight: 500;
  }

  th[scope='row'] {
    white-space: nowrap;
  }

  table.striped tbody tr:nth-child(odd) th,
  table.striped tbody tr:nth-child(odd) td {
    background-color: color-mix(
      in srgb,
      currentColor,
      transparent 90%
    );
  }

  img {
    height: auto;
    border-style: none;
    vertical-align: middle;
    object-fit: cover;
  }

  :where(svg:not([fill])) {
    fill: currentColor;
  }

  /* maybe also stroke */
  :where(svg:not([stroke])) {
    stroke: currentColor;
  }

  svg:not(:root) {
    overflow: hidden;
  }

  aside {
    nav,
    ol,
    ul,
    li {
      display: block;
    }

    li {
      padding: calc(var(--spaceTB) * 0.5) var(--spaceLR);
    }

    li a {
      display: block;
    }

    li [role='button'] {
      margin: inherit;
    }
  }

  section {
    margin-block-end: var(--spaceTB);
  }

  /* GRID | Minimal grid system with auto-layout columns */

  .grid {
    --cellwidth: 250px;

    gap: var(--gap);
    display: grid;
    grid-auto-flow: dense;
    grid-template-columns: repeat(
      auto-fit,
      minmax(min(100%, var(--cellwidth)), 1fr)
    );

    > header {
      grid-area: head;
      text-align: left;
      grid-column: 1 / -1;
    }

    > footer {
      grid-area: foot;
      text-align: left;
    }

    > .hero {
      grid-area: img;
      grid-row: 1 / -1;
      object-fit: cover;
      height: fit-content;
    }

    > .body {
      grid-area: middle;
    }
  }

  /* TO DO: MAKE THE GRID BEHAVE USING CQ */
  .grid_container {
    container-type: inline-size;
  }

  @container (min-width: 500px) {
    .grid {
      display: grid;
      /* grid-template-columns: 1fr 1fr 1fr; */
      /* grid-template-rows: 1fr 1fr 1fr; */
      grid-auto-flow: row;
      grid-template-areas:
        'img head'
        'img middle'
        'img foot';
    }
  }

  /* HORIZONTAL scroller (<figure>) */
  figure {
    display: block;
    margin: 0;
    padding: 0;
    overflow-x: auto;

    /* For big images lets limit the size/scroll: */
    img {
      max-inline-size: 200%;
    }

    figcaption {
      padding-block: var(--spaceTB);
      padding-inline: var(--spaceLR);
      color: var(--curCOLa);
    }

    figcaption::first-letter {
      text-transform: uppercase;
    }
  }

  /* MODAL (<dialog>) */

  dialog {
    width: inherit;
    min-width: 50svw;
    height: inherit;
    min-height: 50svh;
    display: flex;
    z-index: 999;
    position: fixed;
    top: 25svh;
    right: 25svw;
    bottom: 25svh;
    left: 25svh;
    align-items: center;
    justify-content: center;
    border: 0;
    -webkit-backdrop-filter: var(--curCOLa);
    backdrop-filter: var(--modal-overlay-backdrop-filter);
    background-color: var(--curCOLa);
    color: var(--curBG);
    filter: invert(1);
  }

  dialog article {
    width: 100%;
    max-height: calc(100svh - var(--spaceTB) * 2);
    margin-block: var(--spaceTB);
    margin-inline: var(--spaceLR);
    overflow: auto;
    background-color: var(--curTXT);
    color: var(--curBG);
  }

  @media (min-width: 576px) {
    dialog article {
      max-width: 510px;
    }
  }

  @media (min-width: 768px) {
    dialog article {
      max-width: 700px;
    }
  }

  dialog article > header,
  dialog article > footer {
    padding: calc(var(--spaceTB) * 0.5) var(--spaceLR);
  }

  dialog article > header .close {
    margin: 0;
    margin-inline-start: var(--spaceLR);
    float: right;
  }

  dialog article > footer {
    text-align: right;
  }

  dialog article > footer button,
  dialog article > footer [role='button'] {
    margin-block-end: 0;
  }

  dialog article > footer button:not(:first-of-type),
  dialog
    article
    > footer
    [role='button']:not(:first-of-type) {
    margin-inline-start: calc(var(--spaceLR) * 0.5);
  }

  dialog article .close {
    display: block;
    width: 1rem;
    height: 1rem;
    margin-block-start: calc(var(--spaceTB) * -1);
    margin-block-end: var(--spaceTB);
    margin-inline-start: auto;
    background-image: var(--icon-close);
    background-position: center;
    background-size: auto 1rem;
    background-repeat: no-repeat;
    opacity: 0.5;
    transition: opacity var(--transition);
  }

  dialog
    article
    .close:is([aria-current], :hover, :active, :focus) {
    opacity: 1;
  }

  dialog:not([open]),
  dialog[open='false'] {
    display: none;
  }

  .modal-is-open {
    padding-inline-end: var(--scrollbar-width, 0px);
    overflow: hidden;
    pointer-events: none;
    touch-action: none;
  }

  .modal-is-open dialog {
    pointer-events: auto;
    touch-action: auto;
  }

  :where(.modal-is-opening, .modal-is-closing) dialog,
  :where(.modal-is-opening, .modal-is-closing)
    dialog
    > article {
    animation-duration: 0.2s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: both;
  }

  :where(.modal-is-opening, .modal-is-closing) dialog {
    animation-duration: 0.8s;
    animation-name: modal-overlay;
  }

  :where(.modal-is-opening, .modal-is-closing)
    dialog
    > article {
    animation-delay: 0.2s;
    animation-name: modal;
  }

  .modal-is-closing dialog,
  .modal-is-closing dialog > article {
    animation-delay: 0s;
    animation-direction: reverse;
  }

  @keyframes modal-overlay {
    from {
      -webkit-backdrop-filter: none;
      backdrop-filter: none;
      background-color: transparent;
    }
  }

  @keyframes modal {
    from {
      transform: translateY(-100%);
      opacity: 0;
    }
  }
}
